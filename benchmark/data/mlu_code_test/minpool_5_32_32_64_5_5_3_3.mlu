__mlu_global__ void minpool(float *input0, float *minpool_18) {
  __nram__ float input0_local_nram[71936];
  for (int bb_inner = 0; bb_inner < 2; ++bb_inner) {
    if (((((int)coreId) * 2) + bb_inner) < 5) {
      __memcpy(
          ((float *)input0_local_nram + (0)),
          ((float *)input0 + (((((int)coreId) * 131072) + (bb_inner * 65536)))),
          262144, GDRAM2NRAM);
    }
    if (((((int)coreId) * 2) + bb_inner) < 5) {
      __bang_minpool(((float *)input0_local_nram + (65536)),
                     ((float *)input0_local_nram + (0)), 64, 32, 32, 5, 5, 3,
                     3);
    }
    if (((((int)coreId) * 2) + bb_inner) < 5) {
      __memcpy(((float *)minpool_18 +
                (((((int)coreId) * 12800) + (bb_inner * 6400)))),
               ((float *)input0_local_nram + (65536)), 25600, NRAM2GDRAM);
    }
  }
}

extern "C" void minpool_kernel(float *output, float *input, int batch_size,
                               int channels, int input_H, int kernel_size,
                               int stride) {
  float *d_input;
  float *d_output;

  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  int output_H = (input_H - kernel_size) / stride + 1;
  int input_size = batch_size * input_H * input_H * channels;
  int output_size = batch_size * output_H * output_H * channels;
  cnrtMalloc((void **)(&d_input), input_size * sizeof(float));
  cnrtMalloc((void **)(&d_output), output_size * sizeof(float));

  cnrtMemcpy(d_input, input, input_size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {4, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION1;

  minpool<<<dim, ktype, queue>>>(d_input, d_output);
  cnrtQueueSync(queue);
  cnrtMemcpy(output, d_output, output_size * sizeof(float),
             cnrtMemcpyDevToHost);
  cnrtQueueDestroy(queue);

  cnrtFree(d_input);
  cnrtFree(d_output);
}