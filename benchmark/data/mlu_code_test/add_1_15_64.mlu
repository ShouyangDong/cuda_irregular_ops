__mlu_global__ void add(float *lhs, float *rhs, float *add_1515) {
  __nram__ float lhs_local_nram[128];
  if (((((int)clusterId) * 4) + ((int)coreId)) < 15) {
    __memcpy(
        ((float *)lhs_local_nram + (0)),
        ((float *)lhs + (((((int)clusterId) * 256) + (((int)coreId) * 64)))),
        256, GDRAM2NRAM);
  }
  if (((((int)clusterId) * 4) + ((int)coreId)) < 15) {
    __memcpy(
        ((float *)lhs_local_nram + (64)),
        ((float *)rhs + (((((int)clusterId) * 256) + (((int)coreId) * 64)))),
        256, GDRAM2NRAM);
  }
  if (((((int)clusterId) * 4) + ((int)coreId)) < 15) {
    __bang_add(((float *)lhs_local_nram + (0)), ((float *)lhs_local_nram + (0)),
               ((float *)lhs_local_nram + (64)), 64);
  }
  if (((((int)clusterId) * 4) + ((int)coreId)) < 15) {
    __memcpy(((float *)add_1515 +
              (((((int)clusterId) * 256) + (((int)coreId) * 64)))),
             ((float *)lhs_local_nram + (0)), 256, NRAM2GDRAM);
  }
}

extern "C" void add_kernel(float *C, float *A, float *B, int size) {
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  float* d_A;
  float* d_B;
  float* d_C;

  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_B), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);
  cnrtMemcpy(d_B, B, size * sizeof(float), cnrtMemcpyHostToDev);


  add<<<dim, ktype, queue>>>(d_A, d_B, d_C);
  cnrtQueueSync(queue);

  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);
  cnrtQueueDestroy(queue);
  cnrtFree(d_A);
  cnrtFree(d_B);
  cnrtFree(d_C);
}