extern "C" __mlu_global__ void sign(float* input0, float* active_sign_177) {
  __nram__ float input0_local_nram[5];
  if (((int)clusterId) < 3) {
    __memcpy(((float *)input0_local_nram + (0)), ((float *)input0 + (((((int)clusterId) * 20) + (((int)coreId) * 5)))), 20, GDRAM2NRAM);
  }
  if (((int)clusterId) < 3) {
    __bang_active_sign(((float *)input0_local_nram + (0)), ((float *)input0_local_nram + (0)), 5);
  }
  if (((int)clusterId) < 3) {
    __memcpy(((float *)active_sign_177 + (((((int)clusterId) * 20) + (((int)coreId) * 5)))), ((float *)input0_local_nram + (0)), 20, NRAM2GDRAM);
  }
}

extern "C" void sign_kernel(float *C, float *A, int size) {
  float *d_A, *d_C;
    cnrtQueue_t queue;
    cnrtSetDevice(0);
    cnrtQueueCreate(&queue);
  cnrtMalloc(&d_A, size * sizeof(float));
  cnrtMalloc(&d_C, size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDevice);

 cnrtDim3_t dim = {1, 4, 4};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  sign<<<dim, ktype, queue>>>(d_A, d_C);

  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDeviceToHost);

  cnrtFree(d_A);
  cnrtFree(d_C);
}