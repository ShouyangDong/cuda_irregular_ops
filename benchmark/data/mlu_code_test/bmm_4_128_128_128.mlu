__mlu_global__ void bmm(float *A, float *B, float *C) {
  __nram__ float A_nram[32 * 128];
  __wram__ float B_wram[128 * 128];
  __nram__ float C_nram[32 * 128];
  if (clusterId < 4) {
    if (coreId < 4) {
      __memcpy(A_nram, A + (clusterId * 4 + coreId) * 32 * 128, 32 * 128 * 4,
               GDRAM2NRAM);
      __memcpy(B_wram, B + (clusterId * 4 + coreId) * 128 * 128, 128 * 128 * 4,
               GDRAM2WRAM);
      __bang_mlp(C_nram, A_nram, B_wram, 32, 128);
      __memcpy(C + (clusterId * 4 + coreId) * 32 * 128, C_nram, 32 * 128 * 4,
               NRAM2GDRAM);
    }
  }
}

extern "C" void bmm_kernel(float *A, float *B, float *C) {
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  int batch_size = 4;
  int m = 128;
  int n = 128;
  int k = 128;
  int num_A = batch_size * m * n;
  int num_B = batch_size * n * k;
  int num_C = batch_size * m * k;

  // Allocate memory on the device
  float *d_A;
  cnrtMalloc((void **)(&d_A), num_A * sizeof(float));
  float *d_B;
  cnrtMalloc((void **)(&d_B), num_B * sizeof(float));
  float *d_C;
  cnrtMalloc((void **)(&d_C), num_C * sizeof(float));

  // Copy data from host to device
  cnrtMemcpy(d_A, A, num_A * sizeof(float), cnrtMemcpyHostToDev);
  cnrtMemcpy(d_B, B, num_B * sizeof(float), cnrtMemcpyHostToDev);

  // Define the function type
  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  // Launch kernel
  bmm<<<dim, ktype, queue>>>(d_A, d_B, d_C);

  // Copy the result back to host
  cnrtMemcpy(C, d_C, num_C * sizeof(float), cnrtMemcpyDevToHost);

  // Free device memory
  cnrtFree(d_A);
  cnrtFree(d_B);
  cnrtFree(d_C);
}
