extern "C" __mlu_global__ void sumpool(float* input0, float* sumpool_45) {
  __nram__ float input0_local_nram[24832];
  for (int bb_inner = 0; bb_inner < 2; ++bb_inner) {
    for (int yy_outer = 0; yy_outer < 55; ++yy_outer) {
      if (((((int)coreId) * 2) + bb_inner) < 5) {
        __memcpy(((float *)input0_local_nram + (0)), ((float *)input0 + ((((((int)coreId) * 1605632) + (bb_inner * 802816)) + (yy_outer * 14336)))), 28416, GDRAM2NRAM,28416, 28672, 2);
      }
      if (((((int)coreId) * 2) + bb_inner) < 5) {
        __bang_sumpool(((float *)input0_local_nram + (21312)), ((float *)input0_local_nram + (0)), 64, 3, 111, 3, 3, 2, 2);
      }
      if (((((int)coreId) * 2) + bb_inner) < 5) {
        __memcpy(((float *)sumpool_45 + ((((((int)coreId) * 387200) + (bb_inner * 193600)) + (yy_outer * 3520)))), ((float *)input0_local_nram + (21312)), 14080, NRAM2GDRAM);
      }
    }
  }
}

extern "C" void sumpool_kernel(float *output, float *input, int batch_size, int channels, int input_H, int kernel_size, int stride) {
    float *d_input, *d_output;
    cnrtQueue_t queue;
    cnrtSetDevice(0);
    cnrtQueueCreate(&queue);
    int output_H = (input_H - kernel_size) / stride + 1;
    int input_size = batch_size * input_H * input_H * channels;
    int output_size = batch_size * output_H * output_H * channels;
    cnrtMalloc(&d_input, input_size * sizeof(float));
    cnrtMalloc(&d_output, output_size * sizeof(float));

    cnrtMemcpy(d_input, input, input_size * sizeof(float), cnrtMemcpyHostToDevice);

  cnrtDim3_t dim = {1, 1, 4};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION1;

    sumpool<<<dim, ktype, queue>>>(d_input, d_output);

    cnrtMemcpy(output, d_output, output_size * sizeof(float), cnrtMemcpyDeviceToHost);

    cnrtFree(d_input);
    cnrtFree(d_output);
}