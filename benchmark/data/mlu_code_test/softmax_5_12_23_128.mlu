__mlu_global__ void softmax(float *A, float *output) {
  __nram__ float dest[128];
  __nram__ float dinominator[128];
  __nram__ float dinominator_temp[128];
  __nram__ float src1[128];
  __nram__ float addition[128];

  for (int i = clusterId * 4 + coreId; i < 1380; i += 16) {
    __memcpy(src1, A + i * 128, 128 * sizeof(float), GDRAM2NRAM);
    __bang_active_exp(src1, src1, 128);
    __bang_write_zero(dinominator, 128);
    __bang_sumpool(dinominator, src1, 1, 1, 128, 1, 128, 1, 1);
    __memset_nram(dinominator_temp, 128, dinominator[0]);
    __bang_div(dest, src1, dinominator_temp, addition, 128);
    __memcpy(output + 128 * i, dest, 128 * sizeof(float), NRAM2GDRAM);
  }
}
extern "C" void softmax_kernel(float *C, float *A, int size1, int size2) {
  float *d_A;
  float *d_C;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  cnrtMalloc((void **)(&d_A), size1 * size2 * sizeof(float));
  cnrtMalloc((void **)(&d_C), size1 * size2 * sizeof(float));

  cnrtMemcpy(d_A, A, size1 * size2 * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  softmax<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size1 * size2 * sizeof(float), cnrtMemcpyDevToHost);
  cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}