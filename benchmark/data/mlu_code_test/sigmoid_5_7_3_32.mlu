__mlu_global__ void sigmoid(float *input0,
                                       float *active_sigmoid_267) {
  __nram__ float input0_local_nram[672];
  if (((((int)clusterId) * 4) + ((int)coreId)) < 5) {
    __memcpy(((float *)input0_local_nram + (0)),
             ((float *)input0 +
              (((((int)clusterId) * 2688) + (((int)coreId) * 672)))),
             2688, GDRAM2NRAM);
  }
  if (((((int)clusterId) * 4) + ((int)coreId)) < 5) {
    __bang_active_sigmoid(((float *)input0_local_nram + (0)),
                          ((float *)input0_local_nram + (0)), 672);
  }
  if (((((int)clusterId) * 4) + ((int)coreId)) < 5) {
    __memcpy(((float *)active_sigmoid_267 +
              (((((int)clusterId) * 2688) + (((int)coreId) * 672)))),
             ((float *)input0_local_nram + (0)), 2688, NRAM2GDRAM);
  }
}

extern "C" void sigmoid_kernel(float *C, float *A, int size) {
  float *d_A, *d_C;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  sigmoid<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);
  cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}
