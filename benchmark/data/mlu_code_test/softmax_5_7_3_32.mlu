__mlu_global__ void softmax(float *A, float *output) {
  __nram__ float dest[32];
  __nram__ float dinominator[32];
  __nram__ float dinominator_temp[32];
  __nram__ float src1[32];
  __nram__ float addition[32];

  for (int i = clusterId * 4 + coreId; i < 105; i += 16) {
    __memcpy(src1, A + i * 32, 32 * sizeof(float), GDRAM2NRAM);
    __bang_active_exp(src1, src1, 32);
    __bang_write_zero(dinominator, 32);
    __bang_sumpool(dinominator, src1, 1, 1, 32, 1, 32, 1, 1);
    __memset_nram(dinominator_temp, 32, dinominator[0]);
    __bang_div(dest, src1, dinominator_temp, addition, 32);
    __memcpy(output + 32 * i, dest, 32 * sizeof(float), NRAM2GDRAM);
  }
}
extern "C" void softmax_kernel(float *C, float *A, int size1, int size2) {
  float *d_A, *d_C;
  cnrtQueue_t queue;
  cnrtSetDevice(0);
  cnrtQueueCreate(&queue);
  cnrtMalloc((void **)(&d_A), size1 * size2 * sizeof(float));
  cnrtMalloc((void **)(&d_C), size1 * size2 * sizeof(float));

  cnrtMemcpy(d_A, A, size1 * size2 * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  softmax<<<dim, ktype, queue>>>(d_A, d_C);

  cnrtMemcpy(C, d_C, size1 * size2 * sizeof(float), cnrtMemcpyDevToHost);

  cnrtFree(d_A);
  cnrtFree(d_C);
}