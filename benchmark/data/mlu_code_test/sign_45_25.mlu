__mlu_global__ void sign(float *input0, float *active_sign_147) {
  __nram__ float input0_local_nram[25];
  for (int i0_outer_outer_outer = 0; i0_outer_outer_outer < 3;
       ++i0_outer_outer_outer) {
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 45) {
      __memcpy(((float *)input0_local_nram + (0)),
               ((float *)input0 +
                ((((i0_outer_outer_outer * 400) + (((int)clusterId) * 100)) +
                  (((int)coreId) * 25)))),
               100, GDRAM2NRAM);
    }
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 45) {
      __bang_active_sign(((float *)input0_local_nram + (0)),
                         ((float *)input0_local_nram + (0)), 25);
    }
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 45) {
      __memcpy(((float *)active_sign_147 +
                ((((i0_outer_outer_outer * 400) + (((int)clusterId) * 100)) +
                  (((int)coreId) * 25)))),
               ((float *)input0_local_nram + (0)), 100, NRAM2GDRAM);
    }
  }
}

extern "C" void sign_kernel(float *C, float *A, int size) {
  float *d_A, *d_C;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  sign<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);;
  cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}