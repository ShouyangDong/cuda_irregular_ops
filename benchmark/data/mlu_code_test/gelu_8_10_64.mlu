__mlu_global__ void gelu(float *input0, float *active_gelup_200) {
  __nram__ float input0_local_nram[640];
  if ((clusterId * 4 + coreId) < 8) {
    __memcpy(((float *)input0_local_nram + (0)),
             ((float *)input0 +
              (((((int)clusterId) * 2560) + (((int)coreId) * 640)))),
             2560, GDRAM2NRAM);
    __bang_active_gelup(((float *)input0_local_nram + (0)),
                        ((float *)input0_local_nram + (0)), 640);
    __memcpy(((float *)active_gelup_200 +
              (((((int)clusterId) * 2560) + (((int)coreId) * 640)))),
             ((float *)input0_local_nram + (0)), 2560, NRAM2GDRAM);
  }
}

extern "C" void gelu_kernel(float *C, float *A, int size) {
  float *d_A;
  float *d_C;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));

  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), 
 cnrtMemcpyHostToDev);
  CNRT_CHECK(cnrtQueueCreate(&queue));

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  gelu<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);
   cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}
