extern "C" __mlu_global__ void add(float *lhs, float *rhs, float *add_945) {
  __nram__ float lhs_local_nram[256];
  for (int i0_outer_outer_outer = 0; i0_outer_outer_outer < 2;
       ++i0_outer_outer_outer) {
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 18) {
      __memcpy(((float *)lhs_local_nram + (0)),
               ((float *)lhs +
                ((((i0_outer_outer_outer * 2048) + (((int)clusterId) * 512)) +
                  (((int)coreId) * 128)))),
               512, GDRAM2NRAM);
    }
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 18) {
      __memcpy(((float *)lhs_local_nram + (128)),
               ((float *)rhs +
                ((((i0_outer_outer_outer * 2048) + (((int)clusterId) * 512)) +
                  (((int)coreId) * 128)))),
               512, GDRAM2NRAM);
    }
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 18) {
      __bang_add(((float *)lhs_local_nram + (0)),
                 ((float *)lhs_local_nram + (0)),
                 ((float *)lhs_local_nram + (128)), 128);
    }
    if ((((i0_outer_outer_outer * 16) + (((int)clusterId) * 4)) +
         ((int)coreId)) < 18) {

      __memcpy(((float *)add_945 +
                ((((i0_outer_outer_outer * 2048) + (((int)clusterId) * 512)) +
                  (((int)coreId) * 128)))),
               ((float *)lhs_local_nram + (0)), 512, NRAM2GDRAM);
    }
  }
}

extern "C" void add_kernel(float *C, float *A, float *B, int size) {
  cnrtQueue_t queue;
  cnrtSetDevice(0);
  cnrtQueueCreate(&queue);
  float *d_A, *d_B, *d_C;

  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_B), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);
  cnrtMemcpy(d_B, B, size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {1, 4, 4};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION1;

  add<<<dim, ktype, queue>>>(d_A, d_B, d_C);

  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);

  cnrtFree(d_A);
  cnrtFree(d_B);
  cnrtFree(d_C);
}