__mlu_global__ void avgpool(float *input0, float *avgpool_40) {
  __nram__ float input0_local_nram[53184];
  for (int yy_outer = 0; yy_outer < 8; ++yy_outer) {
    __memcpy(
        ((float *)input0_local_nram + (0)),
        ((float *)input0 + (((((int)coreId) * 235200) + (yy_outer * 26880)))),
        188160, GDRAM2NRAM);
    __bang_avgpool(((float *)input0_local_nram + (47040)),
                   ((float *)input0_local_nram + (0)), 192, 7, 35, 5, 5, 2, 2);
    __memcpy(
        ((float *)avgpool_40 + (((((int)coreId) * 49152) + (yy_outer * 6144)))),
        ((float *)input0_local_nram + (47040)), 24576, NRAM2GDRAM);
  }
}

extern "C" void avgpool_kernel(float *output, float *input, int batch_size,
                               int channels, int input_H, int kernel_size,
                               int stride) {
  cnrtQueue_t queue;
  cnrtSetDevice(0);
  cnrtQueueCreate(&queue);
  float *d_input, *d_output;
  int output_H = (input_H - kernel_size) / stride + 1;
  int input_size = batch_size * input_H * input_H * channels;
  int output_size = batch_size * output_H * output_H * channels;
  cnrtMalloc((void **)(&d_input), input_size * sizeof(float));
  cnrtMalloc((void **)(&d_output), output_size * sizeof(float));

  cnrtMemcpy(d_input, input, input_size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {4, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION1;

  avgpool<<<dim, ktype, queue>>>(d_input, d_output);

  cnrtMemcpy(output, d_output, output_size * sizeof(float),
             cnrtMemcpyDevToHost);

  cnrtFree(d_input);
  cnrtFree(d_output);
}