__mlu_global__ void sign(float *input0, float *active_sign_298) {
  __nram__ float input0_local_nram[2944];
  for (int i1_outer_i0_fused_outer_outer = 0; i1_outer_i0_fused_outer_outer < 8;
       ++i1_outer_i0_fused_outer_outer) {
    if (clusterId < 2) {
      if ((((i1_outer_i0_fused_outer_outer * 8) + (((int)clusterId) * 4)) +
           ((int)coreId)) < 60) {
        __memcpy(((float *)input0_local_nram + (0)),
                 ((float *)input0 + ((((i1_outer_i0_fused_outer_outer * 23552) +
                                       (((int)clusterId) * 11776)) +
                                      (((int)coreId) * 2944)))),
                 11776, GDRAM2NRAM);
      }
      if ((((i1_outer_i0_fused_outer_outer * 8) + (((int)clusterId) * 4)) +
           ((int)coreId)) < 60) {
        __bang_active_sign(((float *)input0_local_nram + (0)),
                           ((float *)input0_local_nram + (0)), 2944);
      }
      if ((((i1_outer_i0_fused_outer_outer * 8) + (((int)clusterId) * 4)) +
           ((int)coreId)) < 60) {
        __memcpy(((float *)active_sign_298 +
                  ((((i1_outer_i0_fused_outer_outer * 23552) +
                     (((int)clusterId) * 11776)) +
                    (((int)coreId) * 2944)))),
                 ((float *)input0_local_nram + (0)), 11776, NRAM2GDRAM);
      }
    }
  }
}

extern "C" void sign_kernel(float *C, float *A, int size) {
  float *d_A, *d_C;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  sign<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);cnrtMemcpyDevToHost);
  cnrtQueueDestroy(queue);
  cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}