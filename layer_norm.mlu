#include <bang.h>

__mlu_global__ void mlu_layer_norm(
    float* input, 
    float* gamma, 
    float* beta, 
    float* output
) {
    __nram_float diff[8];
    __nram_float local_input[8];
    __nram_float local_gamma[8];
    __nram_float local_beta[8];
    __memcpy(local_gamma, gamma, 8, GDRAM2NRAM);
    __memcpy(local_beta, beta, 8, GDRAM2NRAM);

    if (clusterId  < 2) {
        if (coreId < 4) {
            float mean = 0.0;
            float variance = 0.0;
            __memcpy(local_input, input + clusterId * 4 * 8 + coreId * 8, 32, GDRAM2NRAM);
            // Calculate mean
            for (int i_mean = 0; i_mean < 8; i_mean++) {
                mean += local_input[i_mean];
            }
            mean /= 8;
            // Calculate variance
            __bang_sub_const(diff, local_input, mean, 8);
            __bang_mul(diff, diff, diff, 8);

            for (int i_var = 0; i_var < 8; i_var++) {
                variance += diff[i_var];
            }
            variance = sqrt(variance / 8);

            // Normalize input
            __bang_sub_const(diff, local_input, mean, 8);
            __bang_mul(diff, diff, gamma, 8);
            __bang_div(diff, diff, variance + 1e-5f, 8);
            __bang_add(diff, diff, beta, 8);
            __memcpy(output + clusterId * 4 * 8 + coreId * 8, diff, 32, NRAM2GDRAM);
        }
    }
}

extern "C" void layer_norm_kernel(float* input, float* gamma, float* beta, float* output) {
    cnrtQueue_t queue;
    cnrtSetDevice(0);
    cnrtQueueCreate(&queue);
    int batch_size = 2;
    int seq_length = 4;
    int d_model = 8;
    int num_elements = batch_size * seq_length * d_model;

    // Allocate memory on the device
    float* d_input;
    cnrtMalloc(&d_input, num_elements * sizeof(float));
    float* d_gamma;
    cnrtMalloc(&d_gamma, d_model * sizeof(float));
    float* d_beta;
    cnrtMalloc(&d_beta, d_model * sizeof(float));
    float* d_output;
    cnrtMalloc(&d_output, num_elements * sizeof(float));

    // Copy data from host to device
    cnrtMemcpy(d_input, input, num_elements * sizeof(float), cnrtMemcpyHostToDev);
    cnrtMemcpy(d_gamma, gamma, d_model * sizeof(float), cnrtMemcpyHostToDev);
    cnrtMemcpy(d_beta, beta, d_model * sizeof(float), cnrtMemcpyHostToDev);


    // Define the function type
    cnrtDim3_t dim = {1, 4, 4};
    cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

    // Launch kernel
    mlu_layer_norm<<<dim, ktype, queue>>>(d_input, d_gamma, d_beta, d_output);

    // Copy the result back to host
    cnrtMemcpy(output, d_output, num_elements * sizeof(float), cnrtMemcpyDevToHost);

    // Free device memory
    cnrtFree(d_input);
    cnrtFree(d_gamma);
    cnrtFree(d_beta);
    cnrtFree(d_output);
}