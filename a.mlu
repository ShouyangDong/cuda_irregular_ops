#include <bang.h>

__mlu_global__ void sign(float *input0, float *active_sign_207) {
  __nram__ float input0_local_nram[640];
  if ((clusterId * 4 + coreId) < 8) {
    __memcpy(((float *)input0_local_nram + (0)),
             ((float *)input0 +
              (((((int)clusterId) * 2560) + (((int)coreId) * 640)))),
             2560, GDRAM2NRAM);
    __bang_active_sign(((float *)input0_local_nram + (0)),
                       ((float *)input0_local_nram + (0)), 640);
    __memcpy(((float *)active_sign_207 +
              (((((int)clusterId) * 2560) + (((int)coreId) * 640)))),
             ((float *)input0_local_nram + (0)), 2560, NRAM2GDRAM);
  }
}

//extern "C" void sign_kernel(float *C, float *A, int size) {
int main(void){
  int size = 5120;
  float *d_A, *d_C;
  float* A = (float*)malloc(size * sizeof(float));
  float* C = (float*)malloc(size * sizeof(float));


  for (int i = 0; i < size; i++) {
    A[i] = -1;
  }
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));
  cnrtMalloc((void **)(&d_A), size * sizeof(float));
  cnrtMalloc((void **)(&d_C), size * sizeof(float));

  cnrtMemcpy(d_A, A, size * sizeof(float), cnrtMemcpyHostToDev);

  cnrtDim3_t dim = {16, 1, 1};
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION4;

  sign<<<dim, ktype, queue>>>(d_A, d_C);
  cnrtQueueSync(queue);
  cnrtMemcpy(C, d_C, size * sizeof(float), cnrtMemcpyDevToHost);;

  for (int i = 0; i < 5120; i++) {
    if (C[i] == 1) {
      printf("%f expected, but %f got!\n", (float)(1), C[i]);
    }
  }
  cnrtQueueDestroy(queue);

  cnrtFree(d_A);
  cnrtFree(d_C);
}
